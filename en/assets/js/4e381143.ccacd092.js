"use strict";(self.webpackChunkalemonjs_docs=self.webpackChunkalemonjs_docs||[]).push([[102],{5983:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var s=r(4848),t=r(8453);const i={sidebar_position:3},o="Image",a={id:"alemonjsDocs/advance/images",title:"Image",description:"Describe images using front-end technology stack",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/alemonjsDocs/advance/3-images.md",sourceDirName:"alemonjsDocs/advance",slug:"/alemonjsDocs/advance/images",permalink:"/en/docs/alemonjsDocs/advance/images",draft:!1,unlisted:!1,editUrl:"https://github.com/lemonade-lab/alemonjs-docs/docs/alemonjsDocs/advance/3-images.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Aliases",permalink:"/en/docs/alemonjsDocs/advance/path"},next:{title:"Module",permalink:"/en/docs/alemonjsDocs/advance/models"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Component",id:"component",level:2},{value:"Sending",id:"sending",level:2},{value:"Debugging",id:"debugging",level:2},{value:"CSS",id:"css",level:2},{value:"tailwind",id:"tailwind",level:3},{value:"postcss",id:"postcss",level:3},{value:"Entry",id:"entry",level:3}];function d(n){const e={admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"image",children:"Image"})}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsx)(e.p,{children:"Describe images using front-end technology stack"})}),"\n",(0,s.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:"yarn add jsxp -W\n"})}),"\n",(0,s.jsx)(e.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",metastring:'title=".puppeteerrc.cjs"',children:"/**\r\n * @type {import(\"puppeteer\").Configuration}\r\n */\r\nmodule.exports = require('jsxp/.puppeteerrc')\n"})}),"\n",(0,s.jsx)(e.h2,{id:"component",children:"Component"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",metastring:'title="@src/image/component/Word.tsx"',children:"import React from 'react'\r\nexport default ({ name }) => {\r\n  return (\r\n    <html>\r\n      <body>\r\n        <div> {name} </div>\r\n      </body>\r\n    </html>\r\n  )\r\n}\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",metastring:'title="@src/image/index.tsx"',children:"import React from 'react'\r\nimport { render } from 'jsxp'\r\nimport Word from '@src/image/component/Word'\r\nexport const pictureRender = (Props: Parameters<typeof Word>[0]) => {\r\n  return render({\r\n    // html/hello/uid.html\r\n    path: 'hello',\r\n    name: `${uid}.html`,\r\n    component: <Word {...Props} />\r\n  })\r\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"sending",children:"Sending"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="@src/apps/word/res.ts"',children:"import { useSend, Image, Text } from 'alemonjs'\r\nimport { pictureRender } from '@/src/image/index'\r\nexport default OnResponse(\r\n  async event => {\r\n    const UID = event.UserID\r\n    // pic\r\n    const img = await pictureRender(UID, {\r\n      name: 'Hello Word !'\r\n    })\r\n    // Create\r\n    const Send = useSend(event)\r\n    if (typeof img == 'boolean') {\r\n      Send(Text('Production failed'))\r\n    } else {\r\n      Send(Image(img))\r\n    }\r\n  },\r\n  'message.create',\r\n  /pic/\r\n)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"debugging",children:"Debugging"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",metastring:'title="tsxp.config.tsx"',children:"import React from 'react'\r\nimport { join } from 'path'\r\nimport { defineConfig } from 'jsxp'\r\nimport { readFileSync } from 'fs'\r\nimport Word from '@src/image/conpomnent/Word'\r\nexport default defineConfig({\r\n  routes: {\r\n    '/AssMessage': {\r\n      component: <Word />\r\n    }\r\n  }\r\n})\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",metastring:'title="Load with non -module files"',children:"npx jsxp dev --node-options alemonjs/loader\n"})}),"\n",(0,s.jsx)(e.h2,{id:"css",children:"CSS"}),"\n",(0,s.jsx)(e.h3,{id:"tailwind",children:"tailwind"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",metastring:'title="tailwind.config.js"',children:"/**\r\n *  @type {import('tailwindcss').Config}\r\n */\r\nexport default {\r\n  content: ['./src/**/*.{js,jsx,ts,tsx}']\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"postcss",children:"postcss"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",metastring:'title="postcss.config.cjs"',children:"module.exports = {\r\n  plugins: {\r\n    // Allow importing CSS files using import\r\n    'postcss-import': {},\r\n    // Allow nested syntax\r\n    'postcss-simple-vars': {},\r\n    // nested\r\n    'postcss-nested': {},\r\n    // tailwindcss\r\n    'tailwindcss': {},\r\n    // Add browser prefixes\r\n    'autoprefixer': {},\r\n    // Inline URL resources\r\n    'postcss-url': {\r\n      url: 'inline'\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"entry",children:"Entry"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-css",metastring:'title="@src/input.css"',children:"@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\nbody {\r\n  /* Default margins */\r\n  margin: 0;\r\n  padding: 0;\r\n  /* Margin overlap */\r\n  display: flex;\r\n  flex-direction: column;\r\n}\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",metastring:'title="@src/image/component/Word.tsx"',children:"import React from 'react'\r\nimport { LinkStyleSheet } from 'jsxp'\r\nimport css_output from '@src/input.css'\r\nexport default ({ name }) => {\r\n  return (\r\n    <html>\r\n      <head>\r\n        <LinkStyleSheet src={css_output} />\r\n      </head>\r\n      <body>\r\n        <div> {name} </div>\r\n      </body>\r\n    </html>\r\n  )\r\n}\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"Support for SCSS preprocessing"}),"\n"]})]})}function m(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>a});var s=r(6540);const t={},i=s.createContext(t);function o(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);